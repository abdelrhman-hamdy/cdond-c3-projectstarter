version: 2.1
orbs: 
  slack: circleci/slack@4.10.1

commands:
  revert-migrations:
    description: Revert the last migration
    parameters:
        workflow_id:
            type: string
            default :  ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
                # Example: kvdb.io
                SUCCESS=$(curl --insecure  https://kvdb.io/Sev3AaunGdrwnDJ7jaejaT/migration_<< parameters.workflow_id >>)
                # Logic for reverting the database state
                if (( $SUCCESS == 1 ));
                then
                    cd ~/project/backend
                    npm install
                    npm run migration:revert
                fi  
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stack_id:
        type: string 
        default :  ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.stack_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.stack_id >>


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      #- restore_cache:
      #    keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - slack/notify:
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "Unfortunately FrontEnd Build has failed, review YOUR CODE",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
            
      #- save_cache:
      #    paths: [frontend/node_modules]
      #    key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend 
            npm install 
            npm run build
      - save_cache: 
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
  test-frontend : 
    docker : 
      - image: circleci/node:13.8.0
    steps : 
      - checkout
      - run: 
          name: FrontEnd Test 
          command : |
            cd frontend
            npm install 
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
  
  test-backend : 
    docker : 
      - image: circleci/node:13.8.0
    steps : 
      - checkout
      - run: 
          name: BackEnd Test 
          command : |
            cd backend
            npm install 
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
  scan-frontend : 
    docker : 
      - image: circleci/node:13.8.0
    steps : 
      - checkout
      - run :
          name : FrontEnd Secuirty Check
          command : |
            cd frontend 
            npm install 
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical  
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-backend :  
    docker : 
      - image: circleci/node:13.8.0
    steps : 
      - checkout
      - run : 
          name :  BackEnd Secuirty Check
          command : |
            cd backend
            npm install 
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      #- slack/notify:
      #    event: pass
      #    custom: |
      #      {
      #        "blocks": [
      #          {
      #            "type": "section",
      #            "fields": [
      #              {
      #                "type": "plain_text",
      #                "text": "*Congratulations, the CI pipline ran Succefully !! *",
      #                "emoji": true
      #              }
      #            ]
      #          }
      #        ]
      #      }
        #- save_cache:
        #    paths: [backend/node_modules]
        #    key: backend-build

  deploy-infrastructure: 
      docker : 
        - image : amazon/aws-cli
      steps : 
        - checkout 
        - run : 
            name :  installing tar and  gzip
            command : |
              yum install -y tar gzip
            
        - run:
            name: Ensure back-end infrastructure exists
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeople \
                 --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                 --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
        - run:
            name: Ensure front-end infrastructure exists
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople \
                 --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                 --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
        - run:
            name: Add back-end ip to ansible inventory
            command: |
              cat .circleci/ansible/inventory.txt
              aws ec2 describe-instances --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --query 'Reservations[*].Instances[*].PublicIpAddress'  --output text >> .circleci/ansible/inventory.txt
              aws ec2 describe-instances --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --query 'Reservations[*].Instances[*].PublicIpAddress'  --output text | cat 
              cat .circleci/ansible/inventory.txt
        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt
        - destroy-environment
  configure-infrastructure:
    docker : 
      - image : python:3.7-alpine3.11
    steps : 
      - checkout
      - add_ssh_keys:
            fingerprints: ["87:e4:60:ea:c1:7a:43:89:66:e5:ba:ac:97:ef:2f:85"] 
      - run :
          name : Installing aws-cli
          command : |
            apk add python curl
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible #apk add --update ansible
          command: |
           apk add --update ansible  
      - run:
          name: Run Playbook and Configure server
          command: |
              ansible-playbook -i .circleci/ansible/inventory.txt  .circleci/ansible/configure-server.yml
      - destroy-environment
  run-migrations:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
            curl -d '1' https://kvdb.io/Sev3AaunGdrwnDJ7jaejaT/migration_${CIRCLE_WORKFLOW_ID:0:7}
            echo 'Successful'
            fi

  deploy-frontend:
    docker:
      - image : amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: Install dependencies
          command: |
              curl -sL "https://rpm.nodesource.com/setup_12.x"  | bash -
              yum install -y nodejs --enablerepo=nodesource
              yum install -y tar gzip
              
               
      - run:
          name: Get backend url IMP to see the echos
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --query 'Reservations[*].Instances[*].PublicIpAddress'  --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations
  deploy-backend: 
      docker:
      - image : amazon/aws-cli
      steps : 
       - checkout 
       - run: 
          name: installing Ansible 
          command : |
                amazon-linux-extras install -y epel
                yum install ansible -y --enablerepo=epel
                yum install -y  gzip tar
                curl -sL "https://rpm.nodesource.com/setup_12.x"  | bash -
                yum install -y nodejs --enablerepo=nodesource
                yum install -y  openssh-clients openssh
       - add_ssh_keys:
           fingerprints: ["87:e4:60:ea:c1:7a:43:89:66:e5:ba:ac:97:ef:2f:85"]
       - attach_workspace:
          at: ~/
       - run :
          name :  deploy backend object 
          command : |
              cd backend/
              npm i
              npm run build
              cd ..
              mkdir .circleci/ansible/roles/deploy/files
              tar  -czvf .circleci/ansible/roles/deploy/files/artifact.tar.gz backend
              cd .circleci/ansible
              echo "Contents  of the inventory.txt file is -------"
              cat inventory.txt
              # scp -o "StrictHostKeyChecking=no" artifact.tar.gz ubuntu@$(tail -1 inventory.txt):/home/ubuntu/artifact.tar.gz
              
              ansible-playbook -i inventory.txt deploy-backend.yml
       - destroy-environment
       - revert-migrations

  smoke-test:
    docker:
      - image : python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add python curl
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
  
      - run: 
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --query 'Reservations[*].Instances[*].PublicIpAddress'  --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "{$API_URL}"
            if curl "${API_URL}/api/status" | grep 'ok'
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"         
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                  # Change this to 0 after the job fails
                return 0
              else
                return 1
              fi
      - destroy-environment
      - revert-migrations
  cloudfront-update:
    docker:
       - image : amazon/aws-cli
    steps:
      - checkout
      - run :
          name : Get Old WorkFLowID
          command : |
            aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text >> workflowid.txt
      - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/workflowid.txt
      
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

      - destroy-environment
      - revert-migrations
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - attach_workspace:
          at: project/.circleci
      - run:
          name: Get old stack workflow id
          command: |
             export OldWorkflowID=$(cat workflowid.txt)
             export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
             --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo Stack names : "${STACKS[@]}"   
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
            requires: [build-backend]
      - scan-frontend:
            requires: [build-frontend]
      - deploy-infrastructure
          #requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          #filters:
          #  branches:
          #    only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
         requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]  
      - smoke-test:
          requires: [deploy-frontend,deploy-backend]
      - cloudfront-update : 
          requires: [smoke-test]
      - cleanup : 
          requires: [cloudfront-update]   

